Mad_high = 5
)
saveRDS(df_pcp, file.path(getwd(), "/Outputs/", df_pcp_file))
csv_pcp_name <- naming_protocol(binfile, suffix = "_df_pcp.csv")
write.csv(df_pcp,
file = file.path(getwd(), "/Outputs/", csv_pcp_name))
} else {
df_pcp <- readRDS(file.path(getwd(), "/Outputs/", df_pcp_file))
}
segment_data1 <- df_pcp
# Add the additional class onto the end.
segment_data1$Class.prior <- segment_data1$Class.current <- segment_data1$Class.post <- 2
# Create the correct classes for post and priors.
segment_data1$Class.prior[1:(length(segment_data1$Class.prior) - 2)] <- df_pcp$Class.current
segment_data1$Class.current[2:(length(segment_data1$Class.prior) - 1)] <- df_pcp$Class.current
segment_data1$Class.post[3:(length(segment_data1$Class.prior))] <- df_pcp$Class.current
# 3. Find the Bed and Rise times
no_days <- number_of_days(binfile, start_time) + 1 # For days rather than nights.
if (!file.exists(file.path(getwd(), "/Outputs/", bed_rise_df_file))) {
bed_rise_df <- bed_rise_detect(binfile,
df_pcp,
no_days,
verbose = FALSE
)
saveRDS(bed_rise_df, file.path(getwd(), "/Outputs/", bed_rise_df_file))
csv_bedrise_name <- naming_protocol(binfile, suffix = "_bed_rise_df.csv")
write.csv(bed_rise_df,
file = file.path(getwd(), "/Outputs/", csv_bedrise_name))
} else {
bed_rise_df <- readRDS(file.path(getwd(), "/Outputs/", bed_rise_df_file))
}
t <- as.POSIXct(as.numeric(as.character(segment_data1$Start.Time[1])), origin = "1970-01-01")
first_date <- as.Date(t)
first_time <- as.POSIXct(as.character(paste((first_date - 1), "15:00")), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
min_boundary <- max_boundary <- c()
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
start_time <- "03:00"
# 0. Write the header of the file as JSON
header <- header.info(binfile)
header_json <- toJSON(setNames(header$Value, rownames(header)))
write(header_json, file.path(getwd(), "/Outputs/", header_file))
# 1. Segment the data using the Awake Sleep Model
segment_data <- combine_segment_data(binfile,
start_time,
datacols,
mmap.load = mmap.load)
header_file <- naming_protocol(binfile, suffix = "_header.json")
# 0. Write the header of the file as JSON
header <- header.info(binfile)
library("optparse")
library(GENEAread)
library(GENEAclassify)
library(ggplot2)
library(scales)
library(reshape2)
library(RJSONIO)
# Functions to use.
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_activity_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_activity_state_rearrange.R")
source("Functions/08_activity_daily_plot.R")
source("Functions/081_sleep_positionals.R")
source("Functions/082_light_temp.R")
source("Functions/083_activity_display.R")
source("Functions/09_activity_detect.R")
split_path <- function(x) if (dirname(x)==x) x else c(basename(x),split_path(dirname(x)))
binfile = "Data/asorici_right_wrist_test2.bin"
binfile_name <- unlist(strsplit(split_path(binfile)[1], "\\."))[1]
header_file <- naming_protocol(binfile, suffix = "_header.json")
df_pcp_file <- naming_protocol(binfile, suffix = "_df_pcp.rds")
bed_rise_df_file <- naming_protocol(binfile, suffix = "_bed_rise_df.rds")
activity_summary_file <- naming_protocol(binfile, suffix = "_activity_summary.csv")
sleep_summary_file <- naming_protocol(binfile, suffix = "_sleep_summary.csv")
mmap.load <- FALSE
datacols <- c(
"UpDown.mean", "UpDown.var", "UpDown.sd",
"Degrees.mean", "Degrees.var", "Degrees.sd",
"Magnitude.mean", "Magnitude.var", "Magnitude.meandiff", "Magnitude.mad",
"Light.mean", "Light.max",
"Temp.mean", "Temp.sumdiff", "Temp.meandiff", "Temp.abssumdiff",
"Temp.sddiff", "Temp.var", "Temp.GENEAskew", "Temp.mad",
"Step.GENEAcount", "Step.sd", "Step.mean",
"Principal.Frequency.mean", "Principal.Frequency.median"
)
# The Start Time is the time of day considered as a cutpoint between two days. That is, from the activity analysis perspective, a "day" starts at 3AM on day (t) and ends at 2:59AM on day (t+1).
start_time <- "03:00"
# 0. Write the header of the file as JSON
header <- header.info(binfile)
header_json <- toJSON(setNames(header$Value, rownames(header)))
write(header_json, file.path(getwd(), "/Outputs/", header_file))
segment_data <- combine_segment_data(binfile,
start_time,
datacols,
mmap.load = mmap.load)
if (!file.exists(file.path(getwd(), "/Outputs/", df_pcp_file))) {
df_pcp <- activity_create_df_pcp(segment_data,
summary_name,
header = header,
# r Cut_points
Magsa_cut = 0.04, # 40mg
Duration_low  = exp(5.5),
Duration_high = exp(8),
Mad.Score2_low  = 0.45,
Mad.Score2_high = 5,
Mad.Score4_low  = 0.45,
Mad.Score4_high = 5,
Mad.Score6_low  = 0.45,
Mad.Score6_high = 5,
Mad_low  = 0.45,
Mad_high = 5
)
saveRDS(df_pcp, file.path(getwd(), "/Outputs/", df_pcp_file))
csv_pcp_name <- naming_protocol(binfile, suffix = "_df_pcp.csv")
write.csv(df_pcp,
file = file.path(getwd(), "/Outputs/", csv_pcp_name))
} else {
df_pcp <- readRDS(file.path(getwd(), "/Outputs/", df_pcp_file))
}
segment_data1 <- df_pcp
# Add the additional class onto the end.
segment_data1$Class.prior <- segment_data1$Class.current <- segment_data1$Class.post <- 2
# Create the correct classes for post and priors.
segment_data1$Class.prior[1:(length(segment_data1$Class.prior) - 2)] <- df_pcp$Class.current
segment_data1$Class.current[2:(length(segment_data1$Class.prior) - 1)] <- df_pcp$Class.current
segment_data1$Class.post[3:(length(segment_data1$Class.prior))] <- df_pcp$Class.current
no_days <- number_of_days(binfile, start_time) + 1 # For days rather than nights.
if (!file.exists(file.path(getwd(), "/Outputs/", bed_rise_df_file))) {
bed_rise_df <- bed_rise_detect(binfile,
df_pcp,
no_days,
verbose = FALSE
)
saveRDS(bed_rise_df, file.path(getwd(), "/Outputs/", bed_rise_df_file))
csv_bedrise_name <- naming_protocol(binfile, suffix = "_bed_rise_df.csv")
write.csv(bed_rise_df,
file = file.path(getwd(), "/Outputs/", csv_bedrise_name))
} else {
bed_rise_df <- readRDS(file.path(getwd(), "/Outputs/", bed_rise_df_file))
}
t <- as.POSIXct(as.numeric(as.character(segment_data1$Start.Time[1])), origin = "1970-01-01")
first_date <- as.Date(t)
first_time <- as.POSIXct(as.character(paste((first_date - 1), "15:00")), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
min_boundary <- max_boundary <- c()
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
View(boundarys)
View(segment_data)
if (!file.exists(file.path(getwd(), "/Outputs/", activity_summary_file))) {
activity_df <- activity_detect(
segment_data1,
boundarys
)
write.csv(activity_df, file.path(getwd(), "/Outputs/", activity_summary_file), row.names = FALSE)
}
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_activity_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_activity_state_rearrange.R")
source("Functions/08_activity_daily_plot.R")
source("Functions/081_sleep_positionals.R")
source("Functions/082_light_temp.R")
source("Functions/083_activity_display.R")
source("Functions/09_activity_detect.R")
no_days <- number_of_days(binfile, start_time) + 1 # For days rather than nights.
if (!file.exists(file.path(getwd(), "/Outputs/", bed_rise_df_file))) {
bed_rise_df <- bed_rise_detect(binfile,
df_pcp,
no_days,
verbose = FALSE
)
saveRDS(bed_rise_df, file.path(getwd(), "/Outputs/", bed_rise_df_file))
csv_bedrise_name <- naming_protocol(binfile, suffix = "_bed_rise_df.csv")
write.csv(bed_rise_df,
file = file.path(getwd(), "/Outputs/", csv_bedrise_name))
} else {
bed_rise_df <- readRDS(file.path(getwd(), "/Outputs/", bed_rise_df_file))
}
t <- as.POSIXct(as.numeric(as.character(segment_data1$Start.Time[1])), origin = "1970-01-01")
first_date <- as.Date(t)
first_time <- as.POSIXct(as.character(paste((first_date - 1), start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
min_boundary <- max_boundary <- c()
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
if (!file.exists(file.path(getwd(), "/Outputs/", activity_summary_file))) {
activity_df <- activity_detect(
segment_data1,
boundarys
)
write.csv(activity_df, file.path(getwd(), "/Outputs/", activity_summary_file), row.names = FALSE)
}
# Functions to use.
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_activity_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_activity_state_rearrange.R")
source("Functions/08_activity_daily_plot.R")
source("Functions/081_sleep_positionals.R")
source("Functions/082_light_temp.R")
source("Functions/083_activity_display.R")
source("Functions/09_activity_detect.R")
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
# 4. Compute Activity Summary
if (!file.exists(file.path(getwd(), "/Outputs/", activity_summary_file))) {
activity_df <- activity_detect(
segment_data1,
boundarys
)
write.csv(activity_df, file.path(getwd(), "/Outputs/", activity_summary_file), row.names = FALSE)
}
if (!file.exists(file.path(getwd(), "/Outputs/", activity_summary_file))) {
activity_df <- activity_detect(
segment_data1,
boundarys
)
write.csv(activity_df, file.path(getwd(), "/Outputs/", activity_summary_file), row.names = FALSE)
}
t <- as.POSIXct(as.numeric(as.character(segment_data1$Start.Time[1])), origin = "1970-01-01")
first_date <- as.Date(t)
first_time <- as.POSIXct(as.character(paste((first_date - 1), start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
min_boundary <- max_boundary <- c()
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
timer <- params$timer
# timer = TRUE # For Manual Testing and vebrose mode remove comment
if (timer) {
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE,
eval = TRUE,
results = "show",
fig.align = "center",
fig.height = 8,
fig.width = 14
)
times = time_stage = c()
times = append(times, Sys.time())
time_stage = append(time_stage, paste0("Start of File"))
} else {
knitr::opts_chunk$set(
echo = FALSE,
warning = FALSE,
message = FALSE,
eval = TRUE,
results = "hide",
fig.align = "center",
fig.height = 8,
fig.width = 14
)
}
source("Functions/09_activity_detect.R")
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
no_days <- number_of_days(binfile, start_time) + 1 # For days rather than nights.
if (!file.exists(file.path(getwd(), "/Outputs/", bed_rise_df_file))) {
bed_rise_df <- bed_rise_detect(binfile,
df_pcp,
no_days,
verbose = FALSE
)
saveRDS(bed_rise_df, file.path(getwd(), "/Outputs/", bed_rise_df_file))
csv_bedrise_name <- naming_protocol(binfile, suffix = "_bed_rise_df.csv")
write.csv(bed_rise_df,
file = file.path(getwd(), "/Outputs/", csv_bedrise_name))
} else {
bed_rise_df <- readRDS(file.path(getwd(), "/Outputs/", bed_rise_df_file))
}
t <- as.POSIXct(as.numeric(as.character(segment_data1$Start.Time[1])), origin = "1970-01-01")
first_date <- as.Date(t)
first_time <- as.POSIXct(as.character(paste((first_date - 1), start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
no_days <- number_of_days(binfile, start_time) + 1 # For days rather than nights.
if (!file.exists(file.path(getwd(), "/Outputs/", bed_rise_df_file))) {
bed_rise_df <- bed_rise_detect(binfile,
df_pcp,
no_days,
verbose = FALSE
)
saveRDS(bed_rise_df, file.path(getwd(), "/Outputs/", bed_rise_df_file))
csv_bedrise_name <- naming_protocol(binfile, suffix = "_bed_rise_df.csv")
write.csv(bed_rise_df,
file = file.path(getwd(), "/Outputs/", csv_bedrise_name))
} else {
bed_rise_df <- readRDS(file.path(getwd(), "/Outputs/", bed_rise_df_file))
}
t <- as.POSIXct(as.numeric(as.character(segment_data1$Start.Time[1])), origin = "1970-01-01")
first_date <- as.Date(t)
first_time <- as.POSIXct(as.character(paste((first_date - 1), start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
min_boundary <- max_boundary <- c()
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
library("optparse")
library(GENEAread)
library(GENEAclassify)
library(ggplot2)
library(scales)
library(reshape2)
library(RJSONIO)
# Functions to use.
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_activity_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_activity_state_rearrange.R")
source("Functions/08_activity_daily_plot.R")
source("Functions/081_sleep_positionals.R")
source("Functions/082_light_temp.R")
source("Functions/083_activity_display.R")
source("Functions/09_activity_detect.R")
header_file <- naming_protocol(binfile, suffix = "_header.json")
df_pcp_file <- naming_protocol(binfile, suffix = "_df_pcp.rds")
bed_rise_df_file <- naming_protocol(binfile, suffix = "_bed_rise_df.rds")
activity_summary_file <- naming_protocol(binfile, suffix = "_activity_summary.csv")
sleep_summary_file <- naming_protocol(binfile, suffix = "_sleep_summary.csv")
mmap.load <- FALSE
datacols <- c(
"UpDown.mean", "UpDown.var", "UpDown.sd",
"Degrees.mean", "Degrees.var", "Degrees.sd",
"Magnitude.mean", "Magnitude.var", "Magnitude.meandiff", "Magnitude.mad",
"Light.mean", "Light.max",
"Temp.mean", "Temp.sumdiff", "Temp.meandiff", "Temp.abssumdiff",
"Temp.sddiff", "Temp.var", "Temp.GENEAskew", "Temp.mad",
"Step.GENEAcount", "Step.sd", "Step.mean",
"Principal.Frequency.mean", "Principal.Frequency.median"
)
start_time <- "03:00"
# 0. Write the header of the file as JSON
header <- header.info(binfile)
header_json <- toJSON(setNames(header$Value, rownames(header)))
write(header_json, file.path(getwd(), "/Outputs/", header_file))
# 1. Segment the data using the Awake Sleep Model
segment_data <- combine_segment_data(binfile,
start_time,
datacols,
mmap.load = mmap.load)
if (!file.exists(file.path(getwd(), "/Outputs/", df_pcp_file))) {
df_pcp <- activity_create_df_pcp(segment_data,
summary_name,
header = header,
# r Cut_points
Magsa_cut = 0.04, # 40mg
Duration_low  = exp(5.5),
Duration_high = exp(8),
Mad.Score2_low  = 0.45,
Mad.Score2_high = 5,
Mad.Score4_low  = 0.45,
Mad.Score4_high = 5,
Mad.Score6_low  = 0.45,
Mad.Score6_high = 5,
Mad_low  = 0.45,
Mad_high = 5
)
saveRDS(df_pcp, file.path(getwd(), "/Outputs/", df_pcp_file))
csv_pcp_name <- naming_protocol(binfile, suffix = "_df_pcp.csv")
write.csv(df_pcp,
file = file.path(getwd(), "/Outputs/", csv_pcp_name))
} else {
df_pcp <- readRDS(file.path(getwd(), "/Outputs/", df_pcp_file))
}
segment_data1 <- df_pcp
# Add the additional class onto the end.
segment_data1$Class.prior <- segment_data1$Class.current <- segment_data1$Class.post <- 2
# Create the correct classes for post and priors.
segment_data1$Class.prior[1:(length(segment_data1$Class.prior) - 2)] <- df_pcp$Class.current
segment_data1$Class.current[2:(length(segment_data1$Class.prior) - 1)] <- df_pcp$Class.current
segment_data1$Class.post[3:(length(segment_data1$Class.prior))] <- df_pcp$Class.current
# 3. Find the Bed and Rise times
no_days <- number_of_days(binfile, start_time) + 1 # For days rather than nights.
if (!file.exists(file.path(getwd(), "/Outputs/", bed_rise_df_file))) {
bed_rise_df <- bed_rise_detect(binfile,
df_pcp,
no_days,
verbose = FALSE
)
saveRDS(bed_rise_df, file.path(getwd(), "/Outputs/", bed_rise_df_file))
csv_bedrise_name <- naming_protocol(binfile, suffix = "_bed_rise_df.csv")
write.csv(bed_rise_df,
file = file.path(getwd(), "/Outputs/", csv_bedrise_name))
} else {
bed_rise_df <- readRDS(file.path(getwd(), "/Outputs/", bed_rise_df_file))
}
t <- as.POSIXct(as.numeric(as.character(segment_data1$Start.Time[1])), origin = "1970-01-01")
first_date <- as.Date(t)
first_time <- as.POSIXct(as.character(paste((first_date - 1), start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
min_boundary <- max_boundary <- c()
for (i in 1:(no_days)) {
min_boundary[i] <- as.POSIXct(as.character(paste(first_date + i - 1, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
max_boundary[i] <- as.POSIXct(as.character(paste(first_date + i, start_time)), format = "%Y-%m-%d %H:%M", origin = "1970-01-01")
}
boundarys <- cbind(min_boundary, max_boundary)
segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
if (!file.exists(file.path(getwd(), "/Outputs/", activity_summary_file))) {
activity_df <- activity_detect(
segment_data1,
boundarys
)
write.csv(activity_df, file.path(getwd(), "/Outputs/", activity_summary_file), row.names = FALSE)
}
activity_df <- activity_detect(
segment_data1,
boundarys
)
write.csv(activity_df, file.path(getwd(), "/Outputs/", activity_summary_file), row.names = FALSE)
boundarys[1,1]
boundarys[1,1]["min_boundary"]
boundarys[1,1]$min_boundary
boundarys[1]
boundarys[2]
boundarys[3]
boundarys[4]
boundarys
View(boundarys)
View(boundarys)
boundarys[1,1]
strftime(boundarys[1,1], format = "%Y-%m-%d %H:%M:%S.%z")
format(boundarys[1,1], format = "%Y-%m-%d %H:%M:%S.%z")
strftime(boundarys[1,1], format = "%Y-%m-%d %H:%M:%S.%z", origin = "1970-01-01")
strftime(boundarys[1,1], format = "%Y-%m-%d %H:%M:%S.%z", origin = "1970-01-01", usetz = TRUE)
strftime(as.POSIXlt(boundarys[1,1], origin = "1970-01-01", tz = ""), format = "%Y-%m-%d %H:%M:%S.%z", usetz = TRUE)
strftime(as.POSIXlt(boundarys[1,1], origin = "1970-01-01", tz = ""), format = "%Y-%m-%d %H:%M:%S.%z")
source("Functions/09_activity_detect.R")
activity_df <- activity_detect(
segment_data1,
boundarys
)
write.csv(activity_df, file.path(getwd(), "/Outputs/", activity_summary_file), row.names = FALSE)
install.packages(c("rpart", "splines", "stats", "stats4"))
install.packages(c("rpart", "splines", "stats", "stats4"))
install.packages("markdown")
install.packages("knitr")
