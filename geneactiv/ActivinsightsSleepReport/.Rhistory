segment_data1 <- activity_state_rearrange(
segment_data1,
boundarys,
bed_rise_df$bed_time,
bed_rise_df$rise_time,
first_date
)
source('~/work/AI-MAS/projects/2020-ALAMEDA-H2020/dev/alameda/geneactiv/ActivinsightsActivityReport/extract_activity_report.R')
library("optparse")
library(GENEAread)
library(GENEAclassify)
library(ggplot2)
library(scales)
library(reshape2)
# Functions to use.
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_state_rearrange.R")
source("Functions/08_UpDown.mad_plot.R")
source("Functions/090_daily_plot.R")
source("Functions/091_sleep_positionals.R")
source("Functions/092_light_temp.R")
source("Functions/093_hypnogram.R")
source("Functions/10_sleep_summary.R")
split_path <- function(x) if (dirname(x)==x) x else c(basename(x),split_path(dirname(x)))
binfile = "data/asorici_right_wrist_test2.bin"
binfile_name <- unlist(strsplit(split_path(binfile)[1], "\\."))[1]
df_pcp_file <- naming_protocol(binfile, suffix = "_df_pcp.rds")
bed_rise_df_file <- naming_protocol(binfile, suffix = "_bed_rise_df.rds")
sleep_summary_file <- naming_protocol(binfile, suffix = "_sleep_summary.csv")
mmap.load <- FALSE
datacols <- c(
"UpDown.mean", "UpDown.var", "UpDown.sd",
"Degrees.mean", "Degrees.var", "Degrees.sd",
"Magnitude.mean", "Magnitude.var", "Magnitude.meandiff", "Magnitude.mad",
"Light.mean", "Light.max",
"Temp.mean", "Temp.sumdiff", "Temp.meandiff", "Temp.abssumdiff",
"Temp.sddiff", "Temp.var", "Temp.GENEAskew", "Temp.mad",
"Step.GENEAcount", "Step.sd", "Step.mean",
"Principal.Frequency.mean", "Principal.Frequency.median"
)
# 2. Create activity intensity level classification DF and bed-time / rise-time points
header <- header.info(binfile)
binfile = "Data/asorici_right_wrist_test2.bin"
# 2. Create activity intensity level classification DF and bed-time / rise-time points
header <- header.info(binfile)
header
View(header)
header$Value
header.info
header["tzone"]
header.tzone
header$tzone
header$calibration
View(header)
header$Value$Start_Time
header$Value$[1]
header$Value[1]
header$Value[2]
header$Value[[1]][2]
header$Value[[2]]
header$Value[[2]].name
header$Value
colnames(header)
colnames(header$Value)
index(header)
index(header$Value)
row.names(header)
install.packages("jsonlite")
library(jsonlite)
res <- toJSON(header)
cat(res)
cat(toJSON(unname(split(header, 1:nrow(header)))))
cat(toJSON(unname(split(header, 1:nrow(header))), flatten=TRUE, auto_unbox = TRUE))
cat(toJSON(header, auto_unbox = True))
cat(toJSON(header, auto_unbox = TRUE))
cat(toJSON(header, auto_unbox = TRUE, flatten = TRUE))
install.packages("RJSON")
install.packages("RJSONIO")
detach("package:jsonlite", unload = TRUE)
library(RJSONIO)
cat(toJSON(setNames(header$Value, rownames(header))))
header_json <- toJSON(setNames(header$Value, rownames(header)))
write(header_json, file.path(getwd(), "/Outputs/", header_file))
header_file <- naming_protocol(binfile, suffix = "_header.json")
header <- header.info(binfile)
header_json <- toJSON(setNames(header$Value, rownames(header)))
write(header_json, file.path(getwd(), "/Outputs/", header_file))
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_activity_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_activity_state_rearrange.R")
source("Functions/08_activity_daily_plot.R")
source("Functions/081_sleep_positionals.R")
source("Functions/082_light_temp.R")
source("Functions/083_activity_display.R")
source("Functions/09_activity_detect.R")
library("optparse")
library(GENEAread)
library(GENEAclassify)
library(ggplot2)
library(scales)
library(reshape2)
library(RJSONIO)
# Functions to use.
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_activity_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_activity_state_rearrange.R")
source("Functions/08_activity_daily_plot.R")
source("Functions/081_sleep_positionals.R")
source("Functions/082_light_temp.R")
source("Functions/083_activity_display.R")
source("Functions/09_activity_detect.R")
library("optparse")
library(GENEAread)
library(GENEAclassify)
library(ggplot2)
library(scales)
library(reshape2)
library(RJSONIO)
# Functions to use.
source("Functions/01_library_installer.R")
source("Functions/02_combine_segment_data.R")
source("Functions/03_naming_protocol.R")
source("Functions/04_create_df_pcp.R")
source("Functions/05_number_of_days.R")
source("Functions/06_bed_rise_detect.R")
source("Functions/07_state_rearrange.R")
source("Functions/08_UpDown.mad_plot.R")
source("Functions/090_daily_plot.R")
source("Functions/091_sleep_positionals.R")
source("Functions/092_light_temp.R")
source("Functions/093_hypnogram.R")
source("Functions/10_sleep_summary.R")
split_path <- function(x) if (dirname(x)==x) x else c(basename(x),split_path(dirname(x)))
binfile = "Data/asorici_right_wrist_test2.bin"
binfile_name <- unlist(strsplit(split_path(binfile)[1], "\\."))[1]
header_file <- naming_protocol(binfile, suffix = "_header.json")
df_pcp_file <- naming_protocol(binfile, suffix = "_df_pcp.rds")
bed_rise_df_file <- naming_protocol(binfile, suffix = "_bed_rise_df.rds")
sleep_summary_file <- naming_protocol(binfile, suffix = "_sleep_summary.csv")
mmap.load <- FALSE
datacols <- c(
"UpDown.mean", "UpDown.var", "UpDown.sd",
"Degrees.mean", "Degrees.var", "Degrees.sd",
"Magnitude.mean", "Magnitude.var", "Magnitude.meandiff", "Magnitude.mad",
"Light.mean", "Light.max",
"Temp.mean", "Temp.sumdiff", "Temp.meandiff", "Temp.abssumdiff",
"Temp.sddiff", "Temp.var", "Temp.GENEAskew", "Temp.mad",
"Step.GENEAcount", "Step.sd", "Step.mean",
"Principal.Frequency.mean", "Principal.Frequency.median"
)
# The Start Time is the time of day considered as a cutpoint between two days. That is, from the activity analysis perspective, a "day" starts at 3PM on day (t) and ends at 2:59PM on day (t+1).
start_time <- "15:00"
# 1. Segment the data using the Awake Sleep Model
segment_data <- combine_segment_data(binfile,
start_time,
datacols,
mmap.load = mmap.load)
df_pcp <- readRDS(file.path(getwd(), "/Outputs/", df_pcp_file))
segment_data$Class.prior <- segment_data$Class.current <- segment_data$Class.post <- 2
# Create the correct classes for post and priors.
segment_data$Class.prior[1:(length(segment_data$Class.prior) - 2)] <- df_pcp$Class.current
segment_data$Class.current[2:(length(segment_data$Class.prior) - 1)] <- df_pcp$Class.current
segment_data$Class.post[3:(length(segment_data$Class.prior))] <- df_pcp$Class.current
# 3. Find the Bed and Rise times
no_days <- number_of_days(binfile, start_time) + 1 # For days rather than nights.
bed_rise_df <- readRDS(file.path(getwd(), "/Outputs/", bed_rise_df_file))
View(combine_segment_data)
View(segment_data)
